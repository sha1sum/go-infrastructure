package context

import (
	"bytes"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/julienschmidt/httprouter"
)

type Param struct {
	Key   string
	Value string
}

// Input represents the incoming request made from a client
type Input struct {
	Params      []Param
	ContentType string
	Format      string // html, xml, json, plain, etc...
	RequestBody []byte
	Request     *http.Request

	routerparams httprouter.Params
}

// NewInput returns a new Webserver/context Input struct that provides
// useful behavior for working with HTTP requests.
func NewInput(req *http.Request, params []Param) *Input {
	return &Input{
		Params:  params,
		Request: req,
	}
}

// Protocol returns the request protocol name: Example: HTTP1/1.1.
func (input *Input) Protocol() string {
	return input.Request.Proto
}

// Path returns the full request path (without query string or fragment)
func (input *Input) Path() string {
	return input.Request.RequestURI
}

// URL returns request URL path (without query string, fragment).
func (input *Input) URL() string {
	return input.Request.URL.String()
}

// Scheme returns request scheme as "http" or "https".
func (input *Input) Scheme() string {
	if input.Request.URL.Scheme != "" {
		return input.Request.URL.Scheme
	} else if input.Request.TLS == nil {
		return "http"
	} else {
		return "https"
	}
}

// Host returns host name. If the host info is unavailable localhost is returned.
func (input *Input) Host() string {
	if input.Request.Host != "" {
		hostParts := strings.Split(input.Request.Host, ":")
		if len(hostParts) > 0 {
			return hostParts[0]
		}
		return input.Request.Host
	}
	return "localhost"
}

// Method returns the HTTP request method: Example: GET
func (input *Input) Method() string {
	return input.Request.Method
}

// IsSecure returns boolean of this request is in https.
func (input *Input) IsSecure() bool {
	return input.Scheme() == "https"
}

// IsWebsocket returns boolean of this request is in webSocket.
func (input *Input) IsWebsocket() bool {
	return input.Header("Upgrade") == "websocket"
}

// Header returns value of a given request header
func (input *Input) Header(key string) string {
	return input.Request.Header.Get(key)
}

// Is returns boolean of this request is on given method, such as Is("POST").
func (input *Input) Is(method string) bool {
	return input.Method() == method
}

// IsFormat returns true if the encoding format matches the test
func (input *Input) IsFormat(test string) bool {
	return input.Header("Content-Type") == test
}

// IsAjax returns boolean of this request is generated by AJAX.
func (input *Input) IsAjax() bool {
	return input.Header("X-Requested-With") == "XMLHttpRequest"
}

// IsUpload returns boolean of whether file uploads in this request or not..
func (input *Input) IsUpload() bool {
	return input.Request.MultipartForm != nil
}

// IP returns the IP address of the client.
// If this is a proxy request the first proxy IP is returned.
// If an error occurs the local IPv4 127.0.0.1 address is returned.
func (input *Input) IP() string {
	ips := input.Proxy()
	if len(ips) > 0 && ips[0] != "" {
		return ips[0]
	}
	ip := strings.Split(input.Request.RemoteAddr, ":")
	if len(ip) > 0 {
		if ip[0] != "[" {
			return ip[0]
		}
	}
	return "127.0.0.1"
}

// Proxy returns proxy client IPs as a slice of strings.
func (input *Input) Proxy() []string {
	if ips := input.Header("X-Forwarded-For"); ips != "" {
		return strings.Split(ips, ",")
	}
	return []string{}
}

// Refer returns http referrer header.
func (input *Input) Refer() string {
	return input.Header("Referer")
}

// SubDomains returns sub domain string.
// if aa.bb.domain.com, returns aa.bb .
func (input *Input) SubDomains() string {
	parts := strings.Split(input.Host(), ".")
	return strings.Join(parts[len(parts)-2:], ".")
}

// Port returns request client port.
// when error or empty, return 80.
func (input *Input) Port() int {
	parts := strings.Split(input.Request.Host, ":")
	if len(parts) == 2 {
		port, _ := strconv.Atoi(parts[1])
		return port
	}
	return 80
}

// UserAgent returns request client user agent string.
func (input *Input) UserAgent() string {
	return input.Header("User-Agent")
}

// Param returns a route param by a given key.
func (input *Input) ParamByName(key string) string {
	for _, v := range input.Params {
		if v.Key == key {
			return v.Value
		}
	}

	return ""
}

// Cookie returns the provided cookie by name.
// If the cookie does not exist an empty string is returned.
func (input *Input) Cookie(key string) string {
	ck, err := input.Request.Cookie(key)
	if err != nil {
		return ""
	}
	return ck.Value
}

// Body returns the request body data as bytes and sets the content
// into the Input.RequestBody field.
func (input *Input) Body() []byte {
	requestbody, _ := ioutil.ReadAll(input.Request.Body)
	input.Request.Body.Close()
	bf := bytes.NewBuffer(requestbody)
	input.Request.Body = ioutil.NopCloser(bf)
	input.RequestBody = requestbody
	return requestbody
}
